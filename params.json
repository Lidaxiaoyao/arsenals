{"name":"Arsenals","tagline":"Arsenals PHP开发框架，让PHP开发不在单调","body":"#Arsenals 开发文档\r\n**版本号： 1.0 DEV**  \r\n**作者： 管宜尧**  \r\n***2014/1/4 0:04:56***\r\n\r\n##第一章 架构指南\r\nArsenals采用了基于MVC的架构，同时支持Service层的扩展。  \r\n- **控制器（controller)**  \r\n\t控制器主要负责处理用户的请求，选择相应的Service层或者是模型层对用户的请求进行处理,并负责选择视图展示需要输出的内容。  \r\n- **服务层（service）**  *可选*  \r\n\t服务层是可选的，完成系统业务逻辑的处理。  \r\n- **模型层（model）**  \r\n\t在没有服务层的情况下，模型层完成业务逻辑的处理并对数据库操作进行处理，在服务层存在的情况下，模型层主要负责与数据库之间进行交互，为Service层实现与下层数据库的交互，而让Service层只关注业务逻辑的处理。  \r\n- **视图层（view）**  \r\n\t视图层负责页面内容的展示，将模型的数据进行渲染，生成HTML或者json格式的数据返回给客户端，用户最终内容的展示。  \r\n- **过滤器（filter）**\r\n\t过滤器类似于java servlet中的Filter，用户对用户请求处理前后进行预处理，如权限控制、异常处理等。\r\n\r\n\r\n系统采用了 *PHP 5.3* 开始支持的 **命名空间** ，在开发过程中，可以实现业务代码的灵活组织，非常简单的实现 ***HMVC*** 架构，以便对业务逻辑进行分离，更加清晰的实现模块化的开发。  \r\n\r\n\r\n\r\n##第二章 开发规范\r\n\r\n####命名规范  \r\n\r\n1. 对于类，采用驼峰命名法进行命名，如`SessionUtils`\r\n2. 对于成员变量，变量，采用_分割的小写方式命名，如`$cate_name`\r\n3. 对于方法，采用首字母小写的驼峰命名， 如`getUserName()`\r\n4. 普通函数采用小写加_的命名方法，如`function _exception_handler()`\r\n4. 对于PHP常量，采用大写，如`define('BASE_PATH', '\\\\')`\r\n5. 在PHP类中，如果成员是private或者protected的，则在名称前加一个 **\\_** ，如`protected function _output()`\r\n6. 文件命名，所有的类文件命名以含有的类名为准，比如类`SessionUtils`所在的PHP文件应该命名为 ***SessionUtils.php*** , 不要使用类似SessionUtils.class.php等格式的命名，自动加载机制无法加载此种命名方法。\r\n\r\n\r\n##第三章 快速开始\r\n本章主要介绍如何快速开始一个Arsenals项目的开发。  \r\n为了方便快速建立一个项目，框架提供了项目构建工具，用于快速创建一个项目，该工具位于Tools目录下，使用方式如下：\r\n<pre>\r\nphp app.php -n Demo\r\n</pre>\r\n命令具体用法参见 [杂项-快速构建项目骨架](#other-quickbuild) 部分。\r\n\r\n- **目录结构**  \r\n\t建立你的项目目录，本例以Demo为例。\r\n\t<pre>\r\n\tDemo\r\n\t|-caches\t\t缓存目录\r\n\t|-configs\r\n\t\t|-config.php  \t项目基本配置\r\n\t\t|-database.php  数据库连接配置\r\n\t\t|-filter.php  \t过滤器配置\r\n\t\t|-hook.php  \t钩子配置\r\n\t\t|_router.php  \t路由配置\r\n\t|-controllers\t\t控制器\r\n\t|-filter\t\t过滤器\r\n\t|-hooks\t\t\t钩子目录\r\n\t|-models\t\t模型\r\n\t|_views\t\t\t视图\r\n\t</pre>\r\n\t实际上，该目录结构并不是必须的，除configs目录是固定之外，其余目录都会根据namespace进行寻找，因此，可以根据程序需要自定义文件存储结构（必须与命名空间相匹配的目录结构）。\r\n- **入口文件**  \r\n\t项目的入口文件 ```index.php```\r\n\t<pre>\r\n\tuse Demo\\DemoBootstrap;\r\n\t\r\n\t// 定义项目配置\r\n\tdefine('APP_NAME', 'Demo');\r\n\tdefine('BASE_PATH', realpath(dirname(__FILE__)) . DIRECTORY_SEPARATOR);\r\n\t\r\n\t// 项目入口\r\n\trequire BASE_PATH . 'Demo/DemoBootstrap.php';\r\n\t$instance = new DemoBootstrap();\r\n\t$instance->startup();\r\n\t</pre>\r\n\t在项目Demo下，建立项目初始化文件DemoBootstrap.php文件。\r\n\t<pre>\r\n\tnamespace Demo;\r\n\tuse Arsenals\\Core\\Router as Route;\r\n\t\r\n\trequire BASE_PATH . 'Arsenals' . DIRECTORY_SEPARATOR . 'ArsenalsBootstrap.php';\r\n\t// 自定义的初始化文件必须继承自ArsenalsBootstrap类\r\n\tclass DemoBootstrap extends \\Arsenals\\ArsenalsBootstrap {\r\n\t\t// run方法为项目提供了更加方便的配置方式，可以\r\n\t\t// 在此文件中自定义路由以及其它一些个性化配置等\r\n\t\tpublic function run() {\r\n\t\t\tRoute::map(\"art\", '\\\\Demo\\\\controllers\\\\Articles@lists');\r\n\t\t\tRoute::map(\"articles/lists\", function ($input){\r\n\t\t\t\treturn $input->get(\"cat\");\r\n\t\t\t});\r\n\t\t}\r\n\t\r\n\t}\r\n\t</pre>\r\n- **项目配置**  \r\n\t配置文件并不是必须的，如果没有在项目下建立配置文件，将会采用框架内置的配置文件对系统进行配置，自定义配置可以覆盖默认配置。\r\n- **部署运行**  \r\n\t完成项目配置之后就可以简单的写一个控制器，然后运行程序查看结果了。  \r\n\t写一个简单的测试控制器Index控制器：\r\n\t<pre>\r\n\tnamespace Demo\\controllers;\r\n\tuse Arsenals\\Core\\Abstracts\\Controller;\r\n\t\r\n\tclass Index extends Controller{\r\n\t\tpublic function index(){\r\n\t\t\treturn \"hello,world\";\r\n\t\t}\r\n\t}\r\n\t</pre>\r\n\t\r\n\r\n##第四章 参考文档\r\n\r\n###常量定义\r\n<table>\r\n\t<thead>\r\n\t\t<tr><th>常量</th><th>用途</th></tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t<tr>\r\n\t\t<td>APP_PATH</td><td>项目路径</td>\r\n\t</tr>\r\n\t<tr>\r\n\t\t<td>CONFIG_PATH</td><td>配置文件所在路径</td>\r\n\t</tr>\r\n\t<tr>\r\n\t\t<td>VIEW_PATH</td><td>视图所在路径</td>\r\n\t</tr>\r\n\t<tr>\r\n\t\t<td>VIEW_LAYER</td><td>采用的视图实现，默认是SimpleView，值为带有命名空间的试图实现名称</td>\r\n\t</tr>\r\n\t<tr>\r\n\t\t<td>MODEL_NAMESPACE</td><td>模型命名空间</td>\r\n\t</tr>\r\n\t<tr>\r\n\t\t<td>SERVICE_NAMESPACE</td><td>服务层命名空间</td>\r\n\t</tr>\r\n\t<tr>\r\n\t\t<td>CONTROLLER_NAMESPACE</td><td>控制层命名空间</td>\r\n\t</tr>\r\n\t<tr>\r\n\t\t<td>FILTER_NAMESPACE</td><td>过滤器命名空间</td>\r\n\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n###项目配置\r\n\r\n####基本配置config.php\r\n<table>\r\n<thead>\r\n\t<tr><th>配置项</th><th>默认值</th><th>作用</th></tr>\r\n</thead>\r\n<tbody>\r\n\t<tr>\r\n\t\t<td>theme</td>\r\n\t\t<td>defaults</td>\r\n\t\t<td>默认主题</td>\r\n\t</tr>\r\n\t<tr>\r\n\t\t<td>site_url</td>\r\n\t\t<td></td>\r\n\t\t<td>站点访问地址</td>\r\n\t</tr>\r\n\t<tr>\r\n\t\t<td>hook_enabled</td>\r\n\t\t<td>false</td>\r\n\t\t<td>是否允许钩子调用</td>\r\n\t</tr>\r\n</tbody>\r\n</table>\r\n\r\n####数据库配置database.php\r\n<table>\r\n<thead>\r\n\t<tr><th>配置项</th><th>默认值</th><th>作用</th></tr>\r\n</thead>\r\n<tbody>\r\n\t<tr>\r\n\t\t<td>data_source</td>\r\n\t\t<td>Arsenals\\\\Core\\\\Database\\\\MySQL\\\\MySQLiDataSource</td>\r\n\t\t<td>默认采用的数据源</td>\r\n\t</tr>\r\n\t<tr>\r\n\t\t<td>global</td>\r\n\t\t<td>array('prefix')</td>\r\n\t\t<td>数据库访问全局配置</td>\r\n\t</tr>\r\n\t<tr>\r\n\t\t<td>mysql</td>\r\n\t\t<td>array('host','port','db_name','user','password','char_set','dbcollat')</td>\r\n\t\t<td>mysql连接配置</td>\r\n\t</tr>\r\n\t<tr>\r\n\t\t<td>pdo （暂未实现）</td>\r\n\t\t<td>array('dsn','user','password')</td>\r\n\t\t<td>PDO连接配置</td>\r\n\t</tr>\r\n</tbody>\r\n</table>\r\n\r\n####路由配置router.php\r\n下面是默认的路由配置。\r\n<table>\r\n<thead>\r\n\t<tr><th>配置项</th><th>默认值</th><th>作用</th></tr>\r\n</thead>\r\n<tbody>\r\n\t<tr>\r\n\t\t<td>default_controller</td>\r\n\t\t<td>Index</td>\r\n\t\t<td>默认控制器</td>\r\n\t</tr>\r\n\t<tr>\r\n\t\t<td>default_action</td>\r\n\t\t<td>index</td>\r\n\t\t<td>默认访问的方法</td>\r\n\t</tr>\r\n\t<tr>\r\n\t\t<td>route</td>\r\n\t\t<td>空数组</td>\r\n\t\t<td>以数组的kv形式提供路由映射，key为url（支持正则）， value为控制器方法字符串标识</td>\r\n\t</tr>\r\n</tbody>\r\n</table>\r\n\r\n默认情况下访问配置文件中配置的控制其方法，一般访问方法为：控制器名称/方法名（首字母小写即可）。  \r\n如果需要自定义路由，可以在项目入口文件中定义如下： \r\n<pre>\r\npublic function run() {\r\n\t//Route::map(\"articles/lists\", '\\\\Demo\\\\controllers\\\\Articles@lists');\r\n\tRoute::map(\"articles/lists\", function ($input){\r\n\t\treturn $input->get(\"cat\");\r\n\t});\r\n}\r\n</pre>\r\n如果没有自定义路由，将采用系统内置路由规则，系统对所有的控制器方法注入了$input参数，该参数为Input类的实例，方便开发。  \r\n\r\nRoute::map方法支持任意数量参数，可以在第三个参数开始任意传递变量，该参数将会自动附加到回调函数或者控制器方法中，例如：\r\n<pre>\r\nRoute::map('^原创音乐$', function($media, $action){\r\n\treturn \"这里是原创音乐:{$media} {$action}\";\r\n}, \"MP3\", \"play\");\r\n</pre>\r\n\r\n**小提示** ： *如果方法或者回调函数 **第一个** 参数为Input类型的对象，则可以自动注入Input对象，其它参数顺序后移一位。*\r\n\r\n###钩子\r\nArsenals框架提供了系统运行各个阶段的钩子函数功能，使对系统的扩展成为了可能，要使用钩子功能，需要在 ```config.php``` 配置文件中配置 ```hook_enabled``` 为 ```true```。  \r\n\r\n钩子的配置文件为config目录下的 ```hook.php``` 文件,配置规则如下：\r\n<pre>\r\nreturn array(\r\n\t// before_system为挂载点\r\n\t// 挂载点挂载的功能通过数组进行配置\r\n\t'before_system' => array(\r\n\t\t// 执行的为DemoHook对象的beforeSystem1方法\r\n\t\t'Demo\\\\hooks\\\\DemoHook@beforeSystem1',\r\n\t\t\r\n\t\t// 执行的为DemoHook的静态方法beforeSystem2\r\n\t\t'Demo\\\\hooks\\\\DemoHook::beforeSystem2'\r\n\t)\t\r\n);\r\n</pre>\r\n\r\n\r\n\r\n系统内置挂载点：\r\n<table>\r\n<thead>\r\n\t<tr><th>挂载点</th><th>用途</th></tr>\r\n</thead>\r\n<tbody>\r\n\t<tr>\r\n\t\t<td>before_system</td>\r\n\t\t<td>系统初始化之前</td>\r\n\t</tr>\r\n\t<tr>\r\n\t\t<td>after_system</td>\r\n\t\t<td>系统初始化之后</td>\r\n\t</tr>\r\n\t<tr>\r\n\t\t<td>before_controller</td>\r\n\t\t<td>控制器之前</td>\r\n\t</tr>\r\n\t<tr>\r\n\t\t<td>after_controller</td>\r\n\t\t<td>控制器之后</td>\r\n\t</tr>\r\n</tbody>\r\n</table>\r\n\r\n###字段校验规则\r\nArsenals框架提供了字段校验功能，开发过程中，可以方便的使用框架提供的字段校验功能对来自用户的输入信息进行校验。\r\n\r\n要使用字段校验功能，需要使用Input类的静态方法validate方法。\r\n<pre>\r\n\\Arsenals\\Core\\Input::validate($var, $type, $optionals = null)\r\n</pre>\r\n- ```$var``` 需要检验的字段值\r\n- ```$type``` 校验采用的规则\r\n- ```$optionals``` 额外的参数，可以为空\r\n\r\n####系统内置校验规则： \r\n- 正则表达式(指定type为Input::REGEXP)， 第三个参数optionals为正则表达式\r\n- 单一规则  \r\n\tint, boolean, float, validate_url, validate_email, validate_ip, string, stripped,  email, url, number_int, number_float, magic_quotes  \r\n- 组合规则  \r\n<table>\r\n<thead>\r\n\t<tr><th>规则</th><th>用途</th></tr>\r\n</thead>\r\n<tbody>\r\n\t<tr>\r\n\t\t<td>required</td>\r\n\t\t<td>字段必须</td>\r\n\t</tr>\r\n\t<tr>\r\n\t\t<td>string</td>\r\n\t\t<td>字符串，可以指定长度（最小长度,最大长度）</td>\r\n\t</tr>\r\n\t<tr>\r\n\t\t<td>number, int, float</td>\r\n\t\t<td>数字，可以指定范围(最小值,最大值)</td>\r\n\t</tr>\r\n\t<tr>\r\n\t\t<td>range</td>\r\n\t\t<td>指定范围(最小值,最大值)</td>\r\n\t</tr>\r\n\t<tr>\r\n\t\t<td>len</td>\r\n\t\t<td>指定长度（最小长度,最大长度）</td>\r\n\t</tr>\r\n\t<tr>\r\n\t\t<td>id</td>\r\n\t\t<td>ID校验，默认为数字</td>\r\n\t</tr>\r\n\t<tr>\r\n\t\t<td>in</td>\r\n\t\t<td>指定在给定范围内， 如in:1,2,3 取值只允许1,2,3之一</td>\r\n\t</tr>\r\n</tbody>\r\n</table>\r\n\r\n注意： 多个规则之间用|进行分隔。  \r\n如果需要指定规则参数，使用如下规则： 规则名:参数1,参数2\r\n\r\n如果需要使用自定义的规则也很简单，使用Input的validateRuleRegister方法，为Input类注册自定义的校验规则。\r\n<pre>\r\n\\Arsenals\\Core\\Input::validateRuleRegister($rule_name, $entity_name)\r\n</pre>\r\n```$rule_name``` 为定义的规则名称，```$entity_name``` 为规则实现（使用系统约定的对象指定方式）。\r\n\r\n###模板引擎\r\n默认是采用系统内置的简单模板的，该模板使用纯PHP。  \r\n在控制器中渲染模板引擎只需要执行 ```ViewAndModel::make()``` 或者 ```VM::make()``` 方法即可获取解析之后的模板内容。\r\n\r\n可以通过在入口文件中定义常量 **VIEW_LAWER** 修改默认采用的模板引擎，默认值为： **Arsenals\\Core\\Views\\SimpleView** ，采用纯PHP模板。\r\n例如：  \r\n\r\n```define('VIEW_LAYER', 'Arsenals\\Core\\Views\\SimpleView');```  \r\n\r\n\r\n####内置模板引擎ArsenalsTemplates\r\n如果需要使用模板引擎，可以采用系统内置模板引擎 ```ArsenalsTemplates``` , 采用该模板引擎后，视图代码中可以使用内置标签，标签语法类似于Java EE中的JSTL语法。\r\n\r\n使用前需要先配置使用该模板引擎，在项目入口文件中定义常量：   \r\n<pre>define('VIEW_LAYER', 'Arsenals\\Core\\Views\\ArsenalsTemplates');</pre>\r\n该模板引擎默认是使用 ```.html``` 作为模板文件扩展名，因此，所有的模板文件均为 *.html格式。   \r\n在模板中可以使用内置标签库语法进行模板编写。   \r\n#####标签库\r\n- out \t\t\r\n- if\r\n- elif\r\n- else\r\n- include\r\n- while\r\n- foreach/loop\r\n- func\r\n\r\n例如：\r\n模板文件index.html中：\r\n<pre>\r\n\t&lt;html&gt;\r\n\t\t&lt;head&gt;\r\n\t\t\t&lt;title&gt;样例&lt;/title&gt;\r\n\t\t&lt;/head&gt;\r\n\t\t&lt;body&gt;\r\n\t\t\t&lt;div&gt;\r\n\t\t\t\t&lt;c:out value=\"$value\" escape=\"true\" default=\"hello\" &gt;\r\n\t\t\t&lt;/div&gt;\r\n\t\t&lt;/body&gt;\r\n\t&lt;/html&gt;\r\n</pre>\r\n#####模板编译缓存\r\n为了提高效率，模板文件在第一次运行时会编译成 ```.php``` 的缓存文件，以使得在程序运行过程中省略掉模板编译过程，提高运行效率。   \r\n默认编译缓存在缓存目录下的views文件夹中，并且保持了模板文件的原始文件结构以及文件名称（除扩展名之外）。   \r\n#####标签变量规范\r\n模板引擎是基于文本解析的，因此，对标签项的配置比较严格，因此，需要按照标签变量规范进行标签内容录入。如下变量必须进行替换：\r\n<table>\r\n<thead>\r\n\t<tr><th>原始字符</th><th>替换字符</th></tr>\r\n</thead>\r\n<tbody>\r\n\t<tr>\r\n\t\t<td>&gt;</td>\r\n\t\t<td>gt</td>\r\n\t</tr>\r\n\t<tr>\r\n\t\t<td>&lt;</td>\r\n\t\t<td>lt</td>\r\n\t</tr>\r\n\t<tr>\r\n\t\t<td>==</td>\r\n\t\t<td>eq</td>\r\n\t</tr>\r\n\t<tr>\r\n\t\t<td>!=</td>\r\n\t\t<td>neq</td>\r\n\t</tr>\r\n\t<tr>\r\n\t\t<td>&gt;=</td>\r\n\t\t<td>gte</td>\r\n\t</tr>\r\n\t<tr>\r\n\t\t<td>&lt;=</td>\r\n\t\t<td>lte</td>\r\n\t</tr>\r\n\t<tr>\r\n\t\t<td>\\</td>\r\n\t\t<td>.（这里指的是命名空间分隔符）</td>\r\n\t</tr>\r\n</tbody>\r\n</table>\r\n例如：\r\n<pre>\r\n\t&lt;c:func func=\"Demo.hello()\" /&gt;\r\n\t输出为：&lt;?php echo Demo\\hello(); ?&gt;\r\n\r\n\t&lt;c:if test=\"$a gt 5\"&gt;\r\n\t\t${var}\r\n\t&lt;/c:if&gt;\r\n\t输出为：\r\n\t\t&lt;?php if($a &gt 5) { ?&gt;\r\n\t\t&lt;?php echo $var; ?&gt;\r\n\t\t&lt;?php } ?&gt;\r\n</pre>\r\n\r\n####第三方模板引擎\r\n系统还提供了一个基于Twig的模板引擎，不过需要手动加入Twig的类库才可以使用。加入Twig的类库之后，需要在项目的入口文件中定义Twig的Autoloader.php文件的路径常量，如下所示：  \r\n\r\n```define('TWIG_LIB', 'Twig所在目录/Autoloader.php');```\r\n\r\n接下来再配置VIEW_LAWER值为 **'Arsenals\\Libraries\\Twig\\TwigView'** 即可。\r\n\r\n####自定义模板引擎\r\n除了使用内置模板引擎之外，开发者可以使用自定义的模板引擎，使用自定义的模板引擎也很简单，只需要实现自定义的视图解析类，自定义视图解析类实现 **Arsenals\\Core\\Views\\View** 接口即可。  \r\n\r\nView接口中只包含一个方法， ```parse($vm)```, $vm为```Arsenals\\Core\\Views\\ViewAndModel```类型的对象，其中保存了要显示的视图名称以及传递给视图的数据模型。\r\n\r\n```parse($vm)``` 方法完成视图解析，并返回解析后的视图内容。\r\n\r\n例如：  \r\n<pre>\r\nnamespace Demo\\DemoViews;\r\nuse Arsenals\\Core\\Views\\View;\r\n\r\nclass DemoView implements View{  \r\n\tpublic function parse($vm){  \r\n\t\t// $vm->getDatas(); 传递给视图的数据数组\r\n\t\t// 例如： @extract($vm->getDatas());\r\n\r\n\t\t// $vm->getView(); 要显示的视图名称\r\n\r\n\t\treturn \"解析之后的视图字符串\";\r\n\t}\r\n}\r\n</pre>\r\n\r\n配置常量VIEW_LAWE为 ```Demo\\DemoViews\\DemoView```即可。\r\n\r\n###日志系统\r\n开发过程中要进行日志记录，可以通过使用内置的 ```\\Arsenals\\Core\\Log``` 类进行日志记录，默认情况下，系统日志功能是关闭的。   \r\n如果要启用日志功能，需要在项目入口文件中定义常量 ```LOG``` 为 ```true``` 。   \r\n默认情况下，系统会使用内置的文件方式进行日志写入，你也可以通过自定义日志实现进行接管日志写入操作，系统日志实现由常量 ```LOG_IMPL``` 定义，默认值为\t```Arsenals\\\\Core\\\\Logs\\\\FileLogImpl``` ， 采用基于文件的方式。 \r\n\r\n要写入日志，使用一下方法：   \r\n<pre>\r\n$log = Registry::load('Arsenals\\\\Core\\\\Log');\r\n$log->debug(\"日志内容\", '日志类型');\r\n</pre>\r\n\r\n日志类型含有三种： info, debug, error, warning。    \r\n如果需要获取日志内容， 使用 ```getLogs(日志级别)``` 方法。 \r\n\r\n如果需要控制写入日志的级别，可以通过log.php配置文件进行配置：\r\n<pre>\r\nreturn array(\r\n\t'log_levels' => array('info', 'error', 'warning', 'debug') // 允许的日志级别\r\n);\r\n</pre>\r\n \r\n####自定义日志实现\r\n要使用自定义的日志实现，需要实现 ```Arsenals\\Core\\Logs``` 接口， 该接口含有两个方法：   \r\n<pre>\r\npublic function write($level, $message);\r\npublic function getLogs($level = null);\r\n</pre>\r\n然后再入口文件中定义日志实现就可以了。   \r\n<pre>define('LOG_IMPL', '你的日志实现类（包含命名空间）');</pre>\r\n###杂项\r\n<h4 id=\"other-quickbuild\">快速构建项目骨架</h4>\r\n通过使用Tools下的快速构建工具可以快速的构建一个基本项目的骨架，构建命令如下：\r\n<pre>\r\n\tphp app.php -n 项目名称 [额外参数]\r\n</pre>\r\n可选参数如下:\r\n<table>\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th>参数</th><th>功能</th><th>默认值</th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>author</td><td>开发者姓名</td><td>操作系统用户</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>db_prefix</td><td>数据库表前缀</td><td>项目名称小写_</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>db_dbname</td><td>数据库名称</td><td>db_项目名称小写</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>db_user</td><td>数据库用户名</td><td>root</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>db_password</td><td>数据库密码</td><td>空</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>db_host</td><td>数据库地址</td><td>localhost</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>db_port</td><td>数据库端口号</td><td>3306</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>view_theme</td><td>默认视图主题</td><td>default</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>model</td><td>模型目录</td><td>models</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>controller</td><td>控制器目录</td><td>controllers</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>cache</td><td>缓存目录</td><td>caches</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>filter</td><td>Filter目录</td><td>filters</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n例如：    \r\n需要构建一个示例程序Demo。\r\n<pre>\r\nD:\\xampp\\htdocs>php init.php -n CMS --db_prefix demo_ --author developer --db_\r\ndbname test\r\n</pre>\r\n上面的命令构建了一个项目，名称为CMS， 数据表前缀为demo_, 开发者为developer, 数据库名称为test, 其它配置项使用的是默认值。\r\n####异常处理/错误处理\r\n可以在项目入口文件index.php中通过定义常量 ```ERROR_HANDLER``` 和 ```EXCEPTION_HANDLER``` 使用自定义的异常处理。  \r\n例如：\r\n<pre>\r\ndefine('ERROR_HANDLER', 'Arsenals\\\\Core\\\\_error_handler');\r\ndefine('EXCEPTION_HANDLER', 'Arsenals\\\\Core\\\\_exception_handler');\r\n\r\nfunction _error_handler($errno, $errstr, $errfile, $errline){\r\n\t_D(\"文件{$errfile}的第{$errline}行有一个错误，错误代码为{$errno}, 错误描述:{$errstr}\");\r\n}\r\n\r\nfunction _exception_handler(\\Exception $exception){\r\n\t_D(\"文件{$exception->getFile()}的第{$exception->getLine()}行抛出异常， 错误代码为 {$exception->getCode()}， 错误描述 ：{$exception->getMessage()}\");\r\n}\r\n</pre>\r\n####内置异常\r\n框架实现中包含了一些可能会常用到的异常，在开发过程中可以直接使用内置异常类。  \r\n系统内置异常统一在命名空间 ```Arsenals\\Core\\Exceptions``` 下，并且都继承了 ```Arsenals\\Core\\Exceptions\\ArsenalsException``` 异常基类。   \r\n<table>\r\n<thead>\r\n\t<tr><th>内置异常类</th><th>用途</th></tr>\r\n</thead>\r\n<tbody>\r\n\t<tr>\r\n\t\t<td>AccessDeniedException</td>\r\n\t\t<td>拒绝访问异常，一般用于没有权限访问</td>\r\n\t</tr>\r\n\t<tr>\r\n\t\t<td>ClassNotFoundException</td>\r\n\t\t<td>找不到类</td>\r\n\t</tr>\r\n\t<tr>\r\n\t\t<td>ClassTypeException</td>\r\n\t\t<td>类不是合法的类型</td>\r\n\t</tr>\r\n\t<tr>\r\n\t\t<td>FormInvalidException</td>\r\n\t\t<td>表单异常，如表单校验异常</td>\r\n\t</tr>\r\n\t<tr>\r\n\t\t<td>FuncParamException</td>\r\n\t\t<td>函数，方法调用参数异常</td>\r\n\t</tr>\r\n\t<tr>\r\n\t\t<td>NoRecoredException</td>\r\n\t\t<td>没有查询到指定基类异常</td>\r\n\t</tr>\r\n\t<tr>\r\n\t\t<td>PageNotFoundException</td>\r\n\t\t<td>找不到要访问的页面异常</td>\r\n\t</tr>\r\n\t<tr>\r\n\t\t<td>QueryException</td>\r\n\t\t<td>查询异常</td>\r\n\t</tr>\r\n\t<tr>\r\n\t\t<td>RedefineException</td>\r\n\t\t<td>重复定义异常</td>\r\n\t</tr>\r\n\t<tr>\r\n\t\t<td>TypeErrorException</td>\r\n\t\t<td>错误的类型</td>\r\n\t</tr>\r\n</tbody>\r\n</table>\r\n\r\n###扩展类库\r\n####图形验证码\r\n扩展库中包含简单验证码实现，调用方式非常简单：\r\n<pre>\r\n$captcha = Registry::load('\\Arsenals\\Libraries\\Images\\Captcha');\r\n$code = $captcha->generageCode();\r\n$captcha->createImage($code);\r\n</pre>\r\n注意的是，```createImage``` 方法可以接收两个参数，第一个参数为验证码字符串，第二个参数为可选，如果为NULL，则验证码直接输出到浏览器，或者可以为要保存验证码的文件名。\r\n\r\n\r\n####文件上传\r\n框架扩展库中集成了一个简易的文件上传类，该类位于 ```\\Arsenals\\Libraries\\Files\\Uploader.php```。   \r\n使用该类可以简单的实现文件上传操作，使用示例如下：   \r\n<pre>\r\n$uploader = \\Arsenals\\Core\\Registry::load('\\Arsenals\\Libraries\\Files\\Uploader');\r\n$up_status = $uploader->upload(上传字段, 目标文件名);\r\n</pre>\r\n需要注意的是，```upload``` 方法再上传完成后的返回值up_status在上传成功时为文件的访问地址。\r\n\r\n####图像处理\r\n框架扩展库中内置了一个简易的图像处理工具类```\\Arsenals\\Libraries\\Image\\ImageUtils```, 使用该工具类可以轻松的完成对图片的缩放，创建缩略图，添加水印等。\r\n要创建一个图片的缩略图，使用如下方法：\r\n<pre>\r\nuse \\Arsenals\\Libraries\\Image\\ImageUtils;\r\nImageUtils::thumb(原文件名，最大宽度， 最大高度［， 目标文件名［，压缩率＝80］］)\r\n</pre>\r\n注意的是，目标文件名如果为空的话，则会将处理后的图片文件内容发送到浏览器（直接输出）。\r\n\r\n如果要添加水印，则使用如下方法：\r\n<pre>\r\nuse \\Arsenals\\Libraries\\Images\\ImageUtils;\r\nImageUtils::watermark(array(\r\n\t'source_file' => $filename, \r\n\t'watermark'=> 'test.gif', \r\n\t'pos_x'=>-40, \r\n\t'pos_y'=>-40\r\n));\r\n</pre>\r\n可选属性为如下： \r\n  \r\n- source_file 源文件\r\n- watermark 水印图片文件\r\n- pos_x  水印左边距（负数为右边距）\r\n- pos_y  水印上边距（负数为下边距）\r\n- dest_file 存储为目标文件，默认不存储，直接输出\r\n- alpha 水印透明度，默认75\r\n\r\n####SAE(新浪云计算平台)支持\r\n要启用SAE支持，可以通过钩子挂载系统启动前期，加入SAE支持库实现。   \r\n首先，需要在项目配置文件 ```config.php``` 中启用钩子， ```hook_enabled``` 为 ```true``` ；   \r\n其次，在hook.php配置文件中配置系统运行前钩子实现：   \r\n<pre>\r\n'before_system' => array( \r\n\t\t'Demo\\\\hooks\\\\DemoHook@beforeSystem'\r\n)\r\n</pre>\r\n在DemoHook类中，定义载入SAE支持类库：\r\n<pre>\r\npublic function beforeSystem(){\r\n\t$sae = new \\Arsenals\\Libraries\\Sae\\SaeInit();\r\n\t$sae->init();\r\n}\r\n</pre>\r\n\r\n这样，就启用了对SAE的支持了，程序开发过程中，可以通过使用常量 ```IS_SAE``` 对是否是SAE环境进行判断。   \r\n为了实现SAE与传统环境之间的兼容，开发过程中注意不要使用本地文件系统操作函数，而使用系统内置的函数代替：\r\n<pre>\r\n\\Arsenals\\Core\\file_put_contents\r\n\\Arsenals\\Core\\file_get_contents\r\n\\Arsenals\\Core\\file_exists\r\n\\Arsenals\\Core\\opendir\r\n\\Arsenals\\Core\\readdir\r\n\\Arsenals\\Core\\unlink\r\n\\Arsenals\\Core\\closedir\r\n\\Arsenals\\Core\\is_file\r\n\\Arsenals\\Core\\move_uploaded_file\r\n</pre>\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}